% load "parameters.rb"

`timescale 1 ns / 1 ps

module s_axi_lite(/*AUTOARG*/);
`include "parameters.vh"

  parameter AWIDTH = REGSIZE + DWIDTH/32 + 1;

  localparam LSB = DWIDTH/32 + 1;

  /*AUTOINPUT*/
  input                 clk;
  input                 xrst;
  input [AWIDTH-1:0]    awaddr;
  input [2:0]           awprot;
  input                 awvalid;
  input [DWIDTH-1:0]    wdata;
  input [DWIDTH/8-1:0]  wstrb;
  input                 wvalid;
  input                 bready;
  input                 arvalid;
  input [AWIDTH-1:0]    araddr;
  input [1:0]           arprot;
  input                 rready;
  <%- ($port-1).downto($port/2) do |i| -%>
  input [DWIDTH-1:0]    port<%=i%>;
  <%- end -%>

  /*AUTOOUTPUT*/
  output              awready;
  output              wready;
  output              bvalid;
  output [1:0]        bresp;
  output              arready;
  output              rvalid;
  output [DWIDTH-1:0] rdata;
  output [1:0]        rresp;
  <%- 0.upto($port/2-1) do |i| -%>
  output [DWIDTH-1:0] port<%=i%>;
  <%- end -%>

  /*AUTOWIRE*/
  wire port_we;
  wire port_re;

  /*AUTOREG*/
  reg               r_awready;
  reg [AWIDTH-1:0]  r_awaddr;
  reg               r_wready;
  reg               r_bvalid;
  reg [1:0]         r_bresp;
  reg               r_arready;
  reg [AWIDTH-1:0]  r_araddr;
  reg               r_rvalid;
  reg [DWIDTH-1:0]  r_rdata;
  reg [1:0]         r_rresp;
  <%- $port.times do |i| -%>
  reg [DWIDTH-1:0]  r_port<%=i%>;
  <%- end -%>

//==========================================================
// write address control
//==========================================================

  assign awready = r_awready;

  always @(posedge clk)
    if (!xrst)
      r_awready <= 0;
    else
      if (!r_awready && awvalid && wvalid)
        r_awready <= 1;
      else
        r_awready <= 0;

  always @(posedge clk)
    if (!xrst)
      r_awaddr <= 0;
    else
      if (!r_awready && awvalid && wvalid)
        r_awaddr <= awaddr;

//==========================================================
// write data control
//==========================================================

  assign wready = r_wready;

  always @(posedge clk)
    if (!xrst)
      r_wready <= 0;
    else
      if (!r_wready && awvalid && wvalid)
        r_wready <= 1;
      else
        r_wready <= 0;

//==========================================================
// write response control
//==========================================================

  assign bvalid = r_bvalid;
  assign bresp  = r_bresp;

  always @(posedge clk)
    if (!xrst)
      r_bvalid <= 0;
    else
      if (r_awready && awvalid && !r_bvalid && r_wready && wvalid)
        r_bvalid <= 1;
      else if (bready && r_bvalid)
        r_bvalid <= 0;

  always @(posedge clk)
    if (!xrst)
      r_bresp <= 0;
    else
      if (r_awready && awvalid && !r_bvalid && r_wready && wvalid)
        r_bresp <= 0; // "OKAY" response

//==========================================================
// read address control
//==========================================================

  assign arready = r_arready;

  always @(posedge clk)
    if (!xrst)
      r_arready <= 0;
    else
      if (!r_arready && arvalid)
        r_arready <= 1;
      else
        r_arready <= 0;

  always @(posedge clk)
    if (!xrst)
      r_araddr <= 0;
    else
      if (!r_arready && arvalid)
        r_araddr <= araddr;

//==========================================================
// read data control
//==========================================================

  assign rvalid = r_rvalid;
  assign rdata  = r_rdata;
  assign rresp  = r_rresp;

  always @(posedge clk)
    if (!xrst)
      r_rvalid <= 0;
    else
      if (r_arready && arvalid && !r_rvalid)
        r_rvalid <= 1;
      else if (rvalid && rready)
        r_rvalid <= 0;

  always @(posedge clk)
    if (!xrst)
      r_rdata <= 0;
    else
      if (port_re)
        case (r_araddr[REGSIZE-1+LSB:LSB])
          <%- $port.times do |i| -%>
          <%=i%>:  r_rdata <= r_port<%=i%>;
          <%- end -%>
          default: r_rdata <= 0;
        endcase


  always @(posedge clk)
    if (!xrst)
      r_rresp <= 0;
    else
      if (r_arready && arvalid && !r_rvalid)
        r_rresp <= 0; // "OKAY" response

//==========================================================
// port control
//==========================================================

  assign port_we = r_wready && wvalid && r_awready && awvalid;
  assign port_re = r_arready && arvalid && !r_rvalid;

  // PS->PL ports
  <%- 0.upto($port/2-1) do |i| -%>
  assign port<%=i%> = r_port<%=i%>;
  <%- end -%>

  integer byte_idx;
  always @(posedge clk)
    if (!xrst) begin
      <%- $port.times do |i| -%>
      r_port<%=i%> <= 0;
      <%- end -%>
    end
    else
      if (port_we)
        case (r_awaddr[REGSIZE-1+LSB:LSB])
          <%- $port.times do |i| -%>
          <%=i%>:
            for (byte_idx = 0; byte_idx < DWIDTH/8-1; byte_idx = byte_idx + 1)
              if (wstrb[byte_idx])
                r_port<%=i%>[byte_idx*8 +: 8] <= wdata[byte_idx*8 +: 8];
          <%- end -%>
          default: begin
            <%- $port.times do |i| -%>
            r_port<%=i%> <= r_port<%=i%>;
            <%- end -%>
          end
        endcase
      else begin
        // PL->PS ports
        <%- ($port-1).downto($port/2) do |i| -%>
        r_port<%=i%> <= port<%=i%>;
        <%- end -%>
      end

endmodule

